import { black, white } from "./game.js";
import { test, expectMoves, expectState, expectWinner } from "./helpers.js";

/**
 * Each scenario describes the state of dropchess board. There must be a
 * "selected" piece and there can optionally be a target.
 *
 * The selected piece is determined as follows:
 * - If there's only one piece on the board, then it is selected.
 * - If there's only one _white_ piece on the board, then it is selected.
 * - Otherwise, the piece with a caret above (♟̌) is selected.
 *
 * The target is determined as follows:
 * - If there is an `x` that tile is the target.
 * - If there is a piece with an x above (♟̽) then it is the target.
 * - Otherwise there is no target.
 *
 * Each character in the scenario has a corresponding tile and the state
 * of the tile is determined as follows.
 * - If the tile is a ` ` then it is a dropped tile.
 * - If the tile is any other character then it is a stable tile.
 * - If the tile has a tilde below (.̰) then it is shaking.
 *
 * Here are the modifier characters in a form that's easy to copy.
 * - ` ̌` Selected
 * - ` ̽` Targeted
 * - ` ̰` Shaking
 */

test("pawns can only double move from their starting row", () => {
  expectMoves(`
........
...♟....
........
........
........
........
........
........

........
...♟....
...x....
...x....
........
........
........
........
`);

  expectMoves(`
........
........
...♟....
........
........
........
........
........

........
........
...♟....
...x....
........
........
........
........
`);

  expectMoves(`
........
........
........
........
........
........
....♙...
........

........
........
........
........
....x...
....x...
....♙...
........
`);

  expectMoves(`
........
........
........
........
........
....♙...
........
........

........
........
........
........
....x...
....♙...
........
........
`);
});

test(`pawns capture diagonally`, () => {
  expectMoves(`
........
........
..♞.♞...
...♙....
........
........
........
........

........
........
..xxx...
...♙....
........
........
........
........
`);
});

test("pawns can be promoted", () => {
  expectState(`
...x....
...♙....
........
........
........
........
........
........

...♕....
........
........
........
........
........
........
........
`);

  expectState(`
........
........
........
........
........
........
...♟....
...x....

........
........
........
........
........
........
........
...♛....
`);
});

test("pawns do not knock out tiles", () => {
  expectState(`
........
........
...♟....
...x....
........
........
........
........

........
........
........
...♟....
........
........
........
........
`);
});

test("non-pawns knock out tiles", () => {
  expectState(`
........
........
...♘....
........
....x...
........
........
........

........
........
........
........
....♘̰...
........
........
........
`);

  expectState(`
........
........
...x....
........
....♘̰...
........
........
........

........
........
...♘̰....
........
.... ...
........
........
........
`);
});

test("sliding pieces are blocked by dropped tiles", () => {
  expectMoves(`
........
........
...♗....
.... ...
........
........
........
........

.x...x..
..x.x...
...♗....
..x. ...
.x......
x.......
........
........
`);
});

test("pushing pieces off the edges of the board", () => {
  expectState(`
..♛̽.....
........
........
........
..♖.....
........
........
........

..♖̰.....
........
........
........
........
........
........
........
`);
});

test("pushing pieces into dropped tiles", () => {
  expectState(`
.. .....
..♛̽.....
........
........
..♖.....
........
........
........

.. .....
..♖̰.....
........
........
........
........
........
........
`);
});

test("pushed pieces do not knock out tiles", () => {
  expectState(`
........
..♛̽.....
........
........
..♖.....
........
........
........

..♛̰.....
..♖̰.....
........
........
........
........
........
........
`);
});

test("pushing pieces on shaking tiles doesn't drop the tile", () => {
  expectState(`
........
..♛̰̽.....
........
........
..♖.....
........
........
........

..♛̰.....
..♖̰.....
........
........
........
........
........
........
`);
});

test("winning by pushing the king off the board", () => {
  expectWinner(
    white,
    `
♚̽.......
........
........
........
♖.......
........
........
........
`,
  );

  expectWinner(
    black,
    `
........
........
........
♜̌.......
........
........
........
♔̽.......
`,
  );
});
